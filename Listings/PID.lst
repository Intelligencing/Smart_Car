C251 COMPILER V5.60.0,  PID                                                                25/01/22  13:56:04  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE PID
OBJECT MODULE PLACED IN .\Objects\PID.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE CODE\ALGORITHM\PID.c LARGE INTR2 BROWSE INCDIR(.\CODE\ALGORITHM;.\CODE
                    -\DRIVER;.\CODE\Libraries\libraries;.\CODE\Libraries\seekfree_libraries;.\CODE\Libraries\seekfree_peripheral;.\CODE\USER)
                    - DEBUG PRINT(.\Listings\PID.lst) TABS(2) OBJECT(.\Objects\PID.obj) 

stmt  level    source

    1          /*
    2           * @Description  : PID控制算法实现
    3           * @Author       : FZU Liao
    4           * @Date         : 2022-01-02 20:19:32
    5           * @LastEditors  : Liao
    6           * @LastEditTime : 2022-01-22 16:49:46
    7           * @FilePath     : \ALGORITHM\PID.c
    8           * Copyright 2022 FZU Liao, All Rights Reserved. 
    9           */
   10          
   11          #include "PID.h"
   12          #include "stdio.h"
   13          
   14          void PID_SET_TARGET(PID* PID_CONTROL,float Param_Target){
   15   1          PID_CONTROL->TARGET_VALUE = Param_Target;
   16   1      }
   17          
   18          void PID_SET_FACTORS(PID* PID_CONTROL,float Param_P,float Param_I,float Param_D){
   19   1          PID_CONTROL->FACTOR_Proportional = Param_P;
   20   1          PID_CONTROL->FACTOR_Integral     = Param_I;
   21   1          PID_CONTROL->FACTOR_Differential = Param_D;
   22   1      }
   23          
   24          float PID_CALC_RESULT(PID* PID_CONTROL,float CURRENT_INPUT){
   25   1          float P , I , D;
   26   1          float PID_OUTPUT;
   27   1          float ERROR,d_ERROR;
   28   1          ERROR = PID_CONTROL->TARGET_VALUE - CURRENT_INPUT;
   29   1          PID_CONTROL->PID_SUM_ERROR += ERROR;
   30   1          if(PID_CONTROL->PID_X_MODE == PID_REALIZE_MODE){
   31   2              d_ERROR = PID_CONTROL->PID_LAST_ERROR - PID_CONTROL->PID_PREV_ERROR;
   32   2              P = PID_CONTROL->FACTOR_Proportional*ERROR;
   33   2              I = PID_CONTROL->FACTOR_Integral*PID_CONTROL->PID_SUM_ERROR;
   34   2              D = PID_CONTROL->FACTOR_Differential*d_ERROR;
   35   2          }else{
   36   2              d_ERROR = ERROR - 2*PID_CONTROL->PID_LAST_ERROR + PID_CONTROL->PID_PREV_ERROR;
   37   2              P = (ERROR-PID_CONTROL->PID_LAST_ERROR)*PID_CONTROL->FACTOR_Proportional;
   38   2              I = PID_CONTROL->FACTOR_Integral*ERROR;
   39   2              D = PID_CONTROL->FACTOR_Differential*d_ERROR;
   40   2          }
   41   1          PID_CONTROL->PID_PREV_ERROR = PID_CONTROL->PID_LAST_ERROR;
   42   1          PID_CONTROL->PID_LAST_ERROR = ERROR;
   43   1          PID_OUTPUT = P+I+D;
   44   1          return PID_OUTPUT;
   45   1      }
   46          
   47          void PID_INIT_NEWPID(PID* NEW_PID,float Param_P,float Param_I,float Param_D,float Param_Target,PID_CONTRO
             -L_MODE PID_MODE){
   48   1          //memset(NEW_PID,0,sizeof(struct PID_CONTROL_STRUCT));
   49   1          NEW_PID->PID_X_MODE = PID_MODE;
   50   1          NEW_PID->PID_PREV_ERROR     = 0;
   51   1          NEW_PID->PID_LAST_ERROR     = 0;
   52   1          NEW_PID->PID_SUM_ERROR      = 0;
   53   1          PID_SET_FACTORS(NEW_PID,Param_P,Param_I,Param_D);
   54   1          PID_SET_TARGET(NEW_PID,Param_Target);
   55   1      }
   56          
C251 COMPILER V5.60.0,  PID                                                                25/01/22  13:56:04  PAGE 2   

   57          void PID_DEINIT_PID(PID* PID_CONTROL){
   58   1          //free(PID_CONTROL);
   59   1      }
*** WARNING C47 IN LINE 57 OF CODE\ALGORITHM\PID.c: 'PID_CONTROL': unreferenced parameter


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       436     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------         30
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
