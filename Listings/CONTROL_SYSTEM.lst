C251 COMPILER V5.60.0,  CONTROL_SYSTEM                                                     26/01/22  12:28:52  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE CONTROL_SYSTEM
OBJECT MODULE PLACED IN .\Objects\CONTROL_SYSTEM.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE CODE\USER\CONTROL_SYSTEM.c LARGE INTR2 BROWSE INCDIR(.\CODE\ALGORITHM;
                    -.\CODE\DRIVER;.\CODE\Libraries\libraries;.\CODE\Libraries\seekfree_libraries;.\CODE\Libraries\seekfree_peripheral;.\CODE
                    -\USER) DEBUG PRINT(.\Listings\CONTROL_SYSTEM.lst) TABS(2) OBJECT(.\Objects\CONTROL_SYSTEM.obj) 

stmt  level    source

    1          #include "CONTROL_SYSTEM.h"
    2          #include "SERVO_MOTOR_CONTROL.h"
    3          #include "STEP_MOTOR_CONTROL.h"
    4          #include "EM_SENSOR.h"
    5          #include "EM_FILTER.h"
    6          #include "ENCODE_SENSOR.h"
    7          #include "LCD_show.h"
    8          #include "headfile.h"
    9          
   10          #define SPEED 500
   11          #define AUTO_CONTROL 0
   12          
   13          // MyCAR_STATUS TEMP_STATUS; //临时状态变量
   14          MyCAR_STATUS CUR_STATUS;  //当前状态
   15          
   16          int EM_DATA_LIST[4];  //电磁传感器数据存储列表
   17          int TARGET_SPEED;     //目标速度
   18          int CURRENT_SPEED;    //当前速度
   19          int index;            //临时变量
   20          float ANGLE;          //舵机打角
   21          int RES_L;
   22          
   23          //EM_FILTER FILTER;        //电磁传感器               
   24          //ENCODE_SENSOR ENCODE_L;  //左轮编码器
   25          
   26          void (*func_list[7])();//函数指针数组，用于映射不同状态对应的函数
   27          
   28          MyCAR_STATUS CAR_STATUS_JUDGE() {//状态判断
   29   1          float backup;
   30   1          int TARGET_SPEED;
   31   1          int huan_dw;//环岛标志位
   32   1      
   33   1          if((EM_DATA_LIST[0]-EM_DATA_LIST[3])>0)  backup=EM_DATA_LIST[0]-EM_DATA_LIST[3];
   34   1          if((EM_DATA_LIST[0]-EM_DATA_LIST[3])<0)  backup=EM_DATA_LIST[3]-EM_DATA_LIST[1];
   35   1          TARGET_SPEED=430-(int)(backup*1.2);   //弯道最低+直道加速
   36   1          //分段PD
   37   1          if(backup<=50)     return STRAIGHT;
   38   1          if(50<backup<=200){
   39   2              MySteeringPIDAdapter_State(2);
   40   2              return ON_CURVE;
   41   2          }   
   42   1          if(200<backup){
   43   2               MySteeringPIDAdapter_State(3);
   44   2               return ON_CURVE;
   45   2          } 
   46   1           /* * * 环岛处理 * * */      
   47   1          if((EM_DATA_LIST[0]>90&&EM_DATA_LIST[1]>90&&EM_DATA_LIST[1]>=65&&
   48   1               EM_DATA_LIST[1]<=70&&EM_DATA_LIST[0]>=65&&EM_DATA_LIST[0]<=70)   
   49   1               ||(EM_DATA_LIST[0]>90&&EM_DATA_LIST[1]>90&&EM_DATA_LIST[1]>=65&&
   50   1                  EM_DATA_LIST[1]<=70&&EM_DATA_LIST[0]>=65&&EM_DATA_LIST[0]<70)) {//环标志
   51   2              if(huan_dw==0) return INTO_CIRCLE;
   52   2              else {//防止再次入环
   53   3                  huan_dw=0;
   54   3              }
   55   2          }
   56   1      }
   57          
C251 COMPILER V5.60.0,  CONTROL_SYSTEM                                                     26/01/22  12:28:52  PAGE 2   

   58          void MYSYS_INIT(){
   59   1          //状态函数列表初始化
   60   1          func_list[0] = FUNC_STRAIGHT;
   61   1          func_list[1] = FUNC_INTO_CURVE;
   62   1          func_list[2] = FUNC_ON_CURVE;
   63   1          func_list[3] = FUNC_OUT_CURVE;
   64   1          func_list[4] = FUNC_INTO_CIRCLE;
   65   1          func_list[5] = FUNC_ON_CIRCLE;
   66   1          func_list[6] = FUNC_OUT_CIRCLE;
   67   1      
   68   1          //FLAG=OFF;
   69   1          
   70   1          EM_INIT_SENSOR();//电磁传感器初始化
   71   1          ENCODING_INIT();//编码器初始化
   72   1          MyStepMotorControl_INIT();      //初始化步进电机控制系统
   73   1          MySteeringControl_INIT();       //初始化舵机
   74   1      }
   75          
   76          void Data_update(){
   77   1          EM_READ_SENSOR(EM_DATA_LIST);                 //读取数据
   78   1          // debug-----------------------------------------------------------------
   79   1          LCD_display("L",EM_DATA_LIST[0],0);
   80   1          LCD_display("LM",EM_DATA_LIST[1],1);
   81   1          LCD_display("RM",EM_DATA_LIST[2],2);
   82   1          LCD_display("R",EM_DATA_LIST[3],3);
   83   1          LCD_display("LV",RES_L,4);
   84   1      //-----------------------------------------------------------------  
   85   1          RES_L = ENCODING_READ_RESULT();//编码器读取电机转速
   86   1      }
   87          
   88          void MyControlSys_TASK() {
   89   1      
   90   1          ANGLE = MySteeringControl_GETANGLE(EM_DATA_LIST, 0);
   91   1          MyStepMotorControl_TASK(RES_L,SPEED);
   92   1          MySteeringControl_TASK(ANGLE);
   93   1          CUR_STATUS = CAR_STATUS_JUDGE();
   94   1          (*func_list[CUR_STATUS])();
   95   1      }
   96          
   97          //前进函数
   98          void FORWARD_FUNC(){
   99   1          ANGLE=MySteeringControl_GETANGLE(EM_DATA_LIST,0);
  100   1          CURRENT_SPEED=ENCODING_READ_RESULT();//编码器计算当前速度
  101   1          TARGET_SPEED=SPEED; //min_SPEED + (max_SPEED - min_SPEED)/10*ANGLE;
  102   1          //利用舵机打角角度，处理出速度目标值
  103   1          MyStepMotorControl_TASK(RES_L,TARGET_SPEED);//电机输出
  104   1          MySteeringControl_TASK(ANGLE);
  105   1      }
  106          
  107          //直线行驶状态函数实现
  108          void FUNC_STRAIGHT() {
  109   1          MySteeringPIDAdapter_State(1);
  110   1          FORWARD_FUNC();
  111   1      }
  112          
  113          //入弯状态函数实现
  114          void FUNC_INTO_CURVE(){
  115   1          MySteeringPIDAdapter_State(ON_TURN);
  116   1          FORWARD_FUNC();
  117   1          CUR_STATUS = ON_CURVE;
  118   1      }
  119          
  120          //在弯道中状态函数实现
  121          void FUNC_ON_CURVE(){
  122   1          FORWARD_FUNC();
  123   1      }
C251 COMPILER V5.60.0,  CONTROL_SYSTEM                                                     26/01/22  12:28:52  PAGE 3   

  124          
  125          //出弯状态函数实现
  126          void FUNC_OUT_CURVE(){
  127   1          MySteeringPIDAdapter_State(ON_STRAIGHT);
  128   1          FORWARD_FUNC();
  129   1          CUR_STATUS = STRAIGHT;
  130   1      }
  131          
  132          //入环状态函数实现
  133          void FUNC_INTO_CIRCLE(){
  134   1          MySteeringPIDAdapter_State(ON_TURN);
  135   1          MySteeringControl_TASK(10);
  136   1          delay_ms(1000);
  137   1          CUR_STATUS = ON_CIRCLE;
  138   1      }
  139          
  140          //在环岛中状态函数实现
  141          void FUNC_ON_CIRCLE(){
  142   1          FORWARD_FUNC();
  143   1      }
  144          
  145          //出环状态函数实现
  146          void FUNC_OUT_CIRCLE(){
  147   1          MySteeringPIDAdapter_State(ON_STRAIGHT);
  148   1          FORWARD_FUNC();
  149   1          delay_ms(1000);
  150   1          CUR_STATUS = STRAIGHT;
  151   1      }
  152          
*** WARNING C180 IN LINE 55 OF CODE\USER\CONTROL_SYSTEM.c: 'CAR_STATUS_JUDGE': not every path returns a value
*** WARNING C180 IN LINE 55 OF CODE\USER\CONTROL_SYSTEM.c: 'CAR_STATUS_JUDGE': not every path returns a value


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       711     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        36          2
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        13     ------
End of Module Information.


C251 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
